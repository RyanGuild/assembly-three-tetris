{"version":3,"sources":["reducers/gameStateReducer.ts","reducers/index.ts","@types/tris-types.d.ts","reducers/inputKeyReducer.ts","assembly-api/as-ap.ts","world/CanvasCreator.tsx","world/WorldOffset.ts","world/BoardBase.tsx","Constants.ts","world/FixedCameraController.tsx","utils/color.ts","world/BoardBlocks.tsx","world/ActiveBlock.tsx","Game.tsx","actions/activeBlockLeft.ts","actions/activeBlockRight.ts","actions/activeBlockDrop.ts","actions/activeBlockRotateCw.ts","index.tsx","actions/setInputKey.ts","actions/keyUp.ts","actions/newGame.ts"],"names":["initialState","board","activeBlock","update","combineReducers","InputKeys","inputKey","state","action","type","payload","gameState","updateNum","instantiateStreaming","fetch","index","consoleLog","int","console","log","then","instance","Object","assign","GetGameState","BOARD_STATE","BLOCK_STATE","__getInt32ArrayView","boardState","blockState","nextState","x","y","width","height","shape","slice","canvasRoot","document","getElementById","el","createElement","id","body","appendChild","memo","forwardRef","ref","createPortal","WorldOffset","THREE","BoardBase","position","clone","add","attach","args","color","BOARD_WIDTH","setDefaultCamera","useThree","useEffect","camera","setZ","setY","setX","rotateX","I32toColor","array","view","bytes","Uint8Array","buffer","strs","push","toString","join","BoardBlocks","useSelector","Array","from","map","_","rowIndex","Math","floor","colIndex","key","ActiveBlock","App","dispatch","useDispatch","Left","a","TrisWA","block_left","Right","block_right","Down","debug","block_drop","Up","getState","block_rotate_cw","Consumer","store","onClick","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","addEventListener","event","keycode","keyCode","new_game","ReactDOM","render"],"mappings":"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","file":"static/js/main.2493dd9d.chunk.js","sourcesContent":["import { TrisAction, GameState } from \"../@types/tris-types\";\nimport { BOARD_HEIGHT, BOARD_WIDTH } from \"../Constants\";\n\nconst initialState = {\n  board: null,\n  activeBlock: null,\n  update: -1\n};\n\nexport default function gameStateReducer(\n  state = initialState,\n  action: TrisAction<GameState>\n): GameState {\n  switch (action.type) {\n    case \"@@init\":\n      return { ...initialState };\n    case \"UPDATE_GAME_STATE\":\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport inputKey from \"./inputKeyReducer\";\nimport gameState from \"./gameStateReducer\";\n\nexport default combineReducers({\n  inputKey,\n  gameState\n});\n","export enum InputKeys {\n  Left = 37,\n  Up = 38,\n  Right = 39,\n  Down = 40,\n  Space = 32,\n  W = 87,\n  A = 65,\n  S = 83,\n  D = 68,\n  Shift = 16,\n  Tilde = 192\n}\n\nexport type BlockData = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  shape: Int32Array;\n};\n\nexport type TrisAction<T = any> = {\n  type: string;\n  payload: T;\n};\n\nexport type GameState = {\n  activeBlock: BlockData | null;\n  board: Board | null;\n  update: number;\n};\n\nexport type TrisState = {\n  inputKey: InputKeys | null;\n  gameState: GameState;\n};\n","import { TrisAction, InputKeys } from \"../@types/tris-types.d\";\n\nexport default function inputKeyReducer(\n  state = null,\n  action: TrisAction<InputKeys>\n): InputKeys | null {\n  switch (action.type) {\n    case \"SET_INPUT_KEY\":\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { instantiateStreaming } from \"assemblyscript/lib/loader\";\nimport { GameState } from \"../@types/tris-types\";\nimport TrisWA from \"./as-types\";\n\nlet updateNum = 0;\n\nexport default instantiateStreaming<typeof TrisWA>(fetch(\"/as-api.wasm\"), {\n  index: {\n    consoleLog(int: number) {\n      console.log(int);\n    }\n  }\n}).then(instance => {\n  return Object.assign(instance, {\n    GetGameState(): GameState {\n      const { BOARD_STATE, BLOCK_STATE, __getInt32ArrayView } = instance;\n      const boardState = __getInt32ArrayView(BOARD_STATE);\n      const blockState = __getInt32ArrayView(BLOCK_STATE);\n\n      const nextState = {\n        activeBlock: {\n          x: blockState[0],\n          y: blockState[1],\n          width: blockState[2],\n          height: blockState[3],\n          shape: blockState.slice(4)\n        },\n        board: boardState,\n        update: updateNum++\n      };\n      console.log(nextState);\n      return nextState;\n    }\n  });\n});\n\n//getActiveBlockShape,\n//getActiveBlockX,\n//getActiveBlockY,\n//getActiveBlockWidth,\n//getActiveBlockHeight,\n//getBoardShape,\n//__getInt32ArrayView,\n","import React, { forwardRef, Ref, memo } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nlet canvasRoot =\n  document.getElementById(\"canvasRoot\") ||\n  (() => {\n    let el = document.createElement(\"div\");\n    el.id = \"canvasRoot\";\n    document.body.appendChild(el);\n    return el;\n  })();\n\nexport type GridCanvasProps = {\n  width: number;\n  height: number;\n  id: string;\n};\n\nexport default memo(\n  forwardRef(function(\n    { width, height, id }: GridCanvasProps,\n    ref: Ref<HTMLCanvasElement>\n  ) {\n    return createPortal(\n      <div id={id}>\n        <canvas ref={ref} width={width} height={height} />\n      </div>,\n      canvasRoot\n    );\n  })\n);\n","import * as THREE from \"three\";\n\nconst WorldOffset = new THREE.Vector3(4.5, 12.5, 0);\n\nexport default WorldOffset;\n","import React, { Fragment } from \"react\";\nimport * as THREE from \"three\";\nimport WorldOffset from \"./WorldOffset\";\nimport {\n  BOARD_WIDTH,\n  BOARD_HEIGHT,\n  BOARD_BORDER_Y_WIDTH,\n  BOARD_BORDER_X_WIDTH,\n  GAME_DEPTH\n} from \"../Constants\";\n\nconst vOffset = (BOARD_HEIGHT + BOARD_BORDER_Y_WIDTH) / 2;\nconst hOffset = (BOARD_WIDTH + BOARD_BORDER_X_WIDTH) / 2;\nconst fieldWidth = BOARD_WIDTH + BOARD_BORDER_X_WIDTH * 2;\n\nexport default function BoardBase() {\n  return (\n    <Fragment>\n      <mesh\n        position={WorldOffset.clone().add(\n          new THREE.Vector3(hOffset, 0, GAME_DEPTH)\n        )}\n      >\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[BOARD_BORDER_X_WIDTH, BOARD_HEIGHT, 1]}\n        />\n        <meshStandardMaterial attach=\"material\" color={\"grey\"} />\n      </mesh>\n      <mesh\n        position={WorldOffset.clone().add(\n          new THREE.Vector3(-1 * hOffset, 0, GAME_DEPTH)\n        )}\n      >\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[BOARD_BORDER_X_WIDTH, BOARD_HEIGHT, 1]}\n        />\n        <meshStandardMaterial attach=\"material\" color={\"grey\"} />\n      </mesh>\n      <mesh\n        position={WorldOffset.clone().add(\n          new THREE.Vector3(0, vOffset, GAME_DEPTH)\n        )}\n      >\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[fieldWidth, BOARD_BORDER_Y_WIDTH, 1]}\n        />\n        <meshStandardMaterial attach=\"material\" color={\"grey\"} />\n      </mesh>\n      <mesh\n        position={WorldOffset.clone().add(\n          new THREE.Vector3(0, -1 * vOffset, GAME_DEPTH)\n        )}\n      >\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[fieldWidth, BOARD_BORDER_Y_WIDTH, 1]}\n        />\n        <meshStandardMaterial attach=\"material\" color={\"grey\"} />\n      </mesh>\n      <mesh position={WorldOffset}>\n        <boxBufferGeometry\n          attach=\"geometry\"\n          args={[BOARD_WIDTH, BOARD_HEIGHT, 1]}\n        />\n        <meshStandardMaterial attach=\"material\" color={\"grey\"} />\n      </mesh>\n    </Fragment>\n  );\n}\n","export const test = 1;\n\nexport const BOARD_WIDTH = 10;\nexport const BOARD_HEIGHT = 24;\nexport const BOARD_BORDER_X_WIDTH = 20;\nexport const BOARD_BORDER_Y_WIDTH = 4;\nexport const BACKGROUND_DEPTH = 0;\nexport const GAME_DEPTH = 1;\nexport const FOREGROUND_DEPTH = 2;\n","import React, { useEffect, memo } from \"react\";\nimport { useThree } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport WorldOffset from \"./WorldOffset\";\n\nfunction FreeCameraController() {\n  const { setDefaultCamera } = useThree();\n  useEffect(() => {\n    //camera setup\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    camera.position.setZ(18);\n    camera.position.setY(WorldOffset.y - 3);\n    camera.position.setX(WorldOffset.x);\n    camera.rotateX(0.1);\n    setDefaultCamera(camera);\n  }, [setDefaultCamera]);\n\n  return <></>;\n}\n\nexport default memo(FreeCameraController, () => true);\n","export function I32toColor(array: Int32Array, index: number): string | null {\n  let view = array.slice(index, index + 1);\n  if (view[0] === 0) return null;\n  let bytes = new Uint8Array(view.buffer);\n  let strs = [\"#\"];\n  strs.push(bytes[0].toString(16));\n  strs.push(bytes[1].toString(16));\n  strs.push(bytes[2].toString(16));\n  return strs.join(\"\");\n}\n","import React, { Fragment } from \"react\";\nimport * as THREE from \"three\";\nimport { BOARD_HEIGHT } from \"../Constants\";\nimport { I32toColor } from \"../utils/color\";\nimport { useSelector } from \"react-redux\";\nimport { TrisState } from \"../@types/tris-types\";\n\nexport default function BoardBlocks() {\n  const board = useSelector((state: TrisState) => state.gameState.board);\n  if (!board) return null;\n\n  return (\n    <Fragment>\n      {Array.from(board).map((_, index) => {\n        let rowIndex = Math.floor(index / BOARD_HEIGHT);\n        let colIndex = index % BOARD_HEIGHT;\n        let color = I32toColor(board, index);\n        if (!color) return null;\n        console.log({ rowIndex, colIndex, color });\n        return (\n          <mesh\n            key={`${rowIndex},${colIndex}`}\n            position={new THREE.Vector3(rowIndex, colIndex + 1, 1)}\n          >\n            <boxBufferGeometry attach=\"geometry\" args={[0.9, 0.9, 0.9]} />\n            <meshStandardMaterial attach=\"material\" color={color} />\n          </mesh>\n        );\n      })}\n    </Fragment>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport * as THREE from \"three\";\nimport { I32toColor } from \"../utils/color\";\nimport { useSelector } from \"react-redux\";\nimport { TrisState } from \"../@types/tris-types\";\n\nexport default function ActiveBlock() {\n  const activeBlock = useSelector(\n    (state: TrisState) => state.gameState.activeBlock\n  );\n  if (!activeBlock) return null;\n  let { shape, width, height, x, y } = activeBlock;\n  return (\n    <Fragment>\n      {Array.from(shape).map((_, index) => {\n        let rowIndex = Math.floor(index / height);\n        if (rowIndex > height) return null;\n        let colIndex = index % height;\n        if (colIndex > width) return null;\n        let color = I32toColor(shape, index);\n        if (!color) return null;\n        return (\n          <mesh\n            key={`${rowIndex},${colIndex}`}\n            position={new THREE.Vector3(x + rowIndex, y + colIndex, 1)}\n          >\n            <boxBufferGeometry attach=\"geometry\" args={[0.9, 0.9, 0.9]} />\n            <meshStandardMaterial attach=\"material\" color={color} />\n          </mesh>\n        );\n      })}\n    </Fragment>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { ReactReduxContext, Provider } from \"react-redux\";\nimport BoardBase from \"./world/BoardBase\";\nimport CameraController from \"./world/FixedCameraController\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TrisState, InputKeys } from \"./@types/tris-types.d\";\nimport BoardBlocks from \"./world/BoardBlocks\";\nimport ActiveBlock from \"./world/ActiveBlock\";\nimport activeBlockDrop from \"./actions/activeBlockDrop\";\nimport activeBlockLeft from \"./actions/activeBlockLeft\";\nimport activeBlockRight from \"./actions/activeBlockRight\";\nimport activeBlockRotateCw from \"./actions/activeBlockRotateCw\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  //useEffect(() => {\n  //  let timeout = setTimeout(() => dispatch(activeBlockDrop()), 1000);\n  //  return () => clearTimeout(timeout);\n  //});\n\n  const inputKey: InputKeys | null = useSelector(\n    (state: TrisState) => state.inputKey\n  );\n  useEffect(() => {\n    switch (inputKey) {\n      case InputKeys.Left:\n        dispatch(activeBlockLeft());\n        break;\n      case InputKeys.Right:\n        dispatch(activeBlockRight());\n        break;\n      case InputKeys.Down:\n        dispatch(activeBlockDrop());\n        break;\n      case InputKeys.Up:\n        dispatch(activeBlockRotateCw());\n        break;\n    }\n  }, [inputKey, dispatch]);\n\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => (\n        <div id=\"App\" onClick={() => {}}>\n          <Canvas>\n            <Provider store={store}>\n              <ambientLight />\n              <pointLight position={[10, 10, 10]} />\n              <ActiveBlock />\n              <BoardBlocks />\n              <BoardBase />\n              <CameraController />\n            </Provider>\n          </Canvas>\n        </div>\n      )}\n    </ReactReduxContext.Consumer>\n  );\n}\n\nconst test = 0;\n\nexport default App;\n","import TrisWA from \"../assembly-api/as-ap\";\n\nexport default function activeBlockLeft() {\n  return async function(dispatch: (action: any) => void) {\n    if ((await TrisWA).block_left()) {\n      dispatch({\n        type: \"UPDATE_GAME_STATE\",\n        payload: (await TrisWA).GetGameState()\n      });\n    }\n  };\n}\n","import TrisWA from \"../assembly-api/as-ap\";\n\nexport default function activeBlockRight() {\n  return async function(dispatch: (action: any) => void) {\n    if ((await TrisWA).block_right()) {\n      dispatch({\n        type: \"UPDATE_GAME_STATE\",\n        payload: (await TrisWA).GetGameState()\n      });\n    }\n  };\n}\n","import TrisWA from \"../assembly-api/as-ap\";\n\nexport default function activeBlockDrop() {\n  console.debug(\"action: block drop\");\n  return async function(dispatch: (action: any) => void) {\n    if ((await TrisWA).block_drop()) {\n      dispatch({\n        type: \"UPDATE_GAME_STATE\",\n        payload: (await TrisWA).GetGameState()\n      });\n    }\n  };\n}\n","import { TrisState } from \"../@types/tris-types\";\nimport TrisWA from \"../assembly-api/as-ap\";\n\nexport default function activeBlockRotateCw() {\n  return async function(\n    dispatch: (action: any) => void,\n    getState: () => TrisState\n  ) {\n    if ((await TrisWA).block_rotate_cw()) {\n      dispatch({\n        type: \"UPDATE_GAME_STATE\",\n        payload: (await TrisWA).GetGameState()\n      });\n    }\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/index\";\nimport setInputKey from \"./actions/setInputKey\";\nimport keyUp from \"./actions/keyUp\";\nimport newGame from \"./actions/newGame\";\nimport GridCanvas from \"./world/CanvasCreator\";\nimport \"./index.css\";\nimport App from \"./Game\";\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nfunction KeyDownEventHandler(event: KeyboardEvent) {\n  //@ts-ignore\n  store.dispatch(setInputKey(event.keyCode));\n}\nfunction KeyUpEventHandler(event: KeyboardEvent) {\n  //@ts-ignore\n  store.dispatch(keyUp(event.keyCode));\n}\nwindow.addEventListener(\"keydown\", KeyDownEventHandler);\nwindow.addEventListener(\"keyup\", KeyUpEventHandler);\n\n//@ts-ignore\nstore.dispatch(newGame());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    <GridCanvas id={\"gridRoot\"} width={100} height={100} />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { InputKeys, TrisAction } from \"../@types/tris-types.d\";\n\nexport default function setInput(\n  keycode: number\n): TrisAction<InputKeys | null> | null {\n  if (keycode in InputKeys) {\n    return {\n      type: \"SET_INPUT_KEY\",\n      payload: keycode\n    };\n  } else {\n    return null;\n  }\n}\n","import { TrisState, TrisAction } from \"../@types/tris-types.d\";\n\nexport default function keyUp(keycode: number) {\n  return function(\n    dispatch: (action: TrisAction<any>) => void,\n    getState: () => TrisState\n  ) {\n    let { inputKey } = getState();\n    if (inputKey === keycode) {\n      dispatch({\n        type: \"SET_INPUT_KEY\",\n        payload: null\n      });\n    }\n  };\n}\n","import TrisWA from \"../assembly-api/as-ap\";\n\nexport default function() {\n  console.debug(\"action: new game\");\n  return async function(dispatch: (action: any) => void) {\n    (await TrisWA).new_game();\n    dispatch({\n      type: \"UPDATE_GAME_STATE\",\n      payload: (await TrisWA).GetGameState()\n    });\n  };\n}\n"],"sourceRoot":""}